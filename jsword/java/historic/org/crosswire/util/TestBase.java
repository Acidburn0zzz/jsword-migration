
package org.crosswire.util;

import java.io.*;

/**
* A platform to help various SelfTest classes.
*
* <table border='1' cellPadding='3' cellSpacing='0' width="100%">
* <tr><td bgColor='white'class='TableRowColor'><font size='-7'>
* Distribution Licence:<br />
* Project B is free software; you can redistribute it
* and/or modify it under the terms of the GNU General Public License,
* version 2 as published by the Free Software Foundation.<br />
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
* General Public License for more details.<br />
* The License is available on the internet
* <a href='http://www.gnu.org/copyleft/gpl.html'>here</a>, by writing to
* <i>Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston,
* MA 02111-1307, USA</i>, Or locally at the Licence link below.<br />
* The copyright to this program is held by it's authors.
* </font></td></tr></table>
* @see <a href='http://www.eireneh.com/servlets/Web'>Project B Home</a>
* @see <{docs.Licence}>
* @author Joe Walker
*/
public abstract class TestBase
{
    /**
    * This should help people that want to run tests based on this class ...
    * @param out Where to write the results to
    * @param fatal Stop dead if anything goes wrong?
    */
    public abstract void test(PrintWriter out, boolean fatal);

    /**
    * So that we can use this in JLists and the like
    */
    public String toString()
    {
        return getClass().getName();
    }

    /**
    * When a new package test starts
    */
    public static void logPackageStart(PrintWriter out, boolean fatal, Class name)
    {
        TestBase.out = out;
        TestBase.fatal = fatal;

        out.println(name.getName());
        out.println("{");
        out.flush();
    }

    /**
    * When a new package test stops
    */
    public static void logPackageStop()
    {
        if (time != 0)
        {
            float elapsed = System.currentTimeMillis()-time;
            out.println("\t"+elapsed/1000+"");
            out.flush();
        }

        out.println("}\n");
        out.flush();

        time = 0;
    }

    /**
    * Log something happening
    */
    public static void log(Object data)
    {
        if (time != 0)
        {
            float elapsed = System.currentTimeMillis()-time;
            out.println("\t"+elapsed/1000+"");
            out.flush();
        }

        out.print("    "+data);

        time = System.currentTimeMillis();
    }

    /**
    * This allows us to do <code>test(foo, bar);</code> type tests.
    * We only take any action if (foo.equals(bar))
    */
    public final static void test(Object param1, Object param2)
    {
        if (param1 == null)
        {
            if (param2 == null) return;
        }
        else
        {
            if (param1.equals(param2)) return;
        }

        test(new Error("Object test - param1=["+param1+"] param2=["+param2+"]"));
    }

    /**
    * This allows us to do <code>test(1.0, 2.0);</code> type tests.
    * We only take any action if (param1 != param2)
    */
    public final static void test(double param1, double param2)
    {
        if (param1 == param2) return;
        test(new Error("Float test - param1="+param1+" param2="+param2));
    }

    /**
    * This allows us to do <code>test(1, 2);</code> type tests.
    * We only take any action if (param1 != param2)
    */
    public final static void test(long param1, long param2)
    {
        if (param1 == param2) return;
        test(new Error("Integer test - param1="+param1+" param2="+param2));
    }

    /**
    * This allows us to do <code>test(foo.equals(bar));</code> type
    * tests. We only take any action if ok is false.
    * @param ok The operand to test. False means a test failed.
    */
    public final static void test(boolean ok)
    {
        if (ok) return;
        test(new Error("Boolean tests - false"));
    }

    /**
    * Something has definately gone wrong.
    */
    public final static void fail(Throwable ex)
    {
        test(ex);
    }

    /**
    * Something has definately gone wrong.
    */
    public final static void fail()
    {
        test(new Error("Failure"));
    }

    /**
    * Something has definately gone wrong.
    */
    public final static void fail(Object obj)
    {
        test(new Error("Failure: "+obj));
    }

    /**
    * Something has gone wrong - We report the problem. We insist that
    * the caller passes us an exception - Maybe this is as a result of
    * a real problem that something has caught, or more likely it is
    * generated by calling <code>new Error()</code> when a test fails.
    * It is used for the stack trace it contains.
    * @param ex The Exception (Throwable) containing the stack trace
    */
    public final static void test(Throwable ex)
    {
        out.println();
        out.println();
        out.println("=================================================");
        out.println("= Message: "+ex.getMessage());
        out.print("= After: ");
        reportTime();
        out.println("s");
        out.println("=");
        trace(ex);
        out.println("=================================================");
        out.flush();

        if (fatal) System.exit(1);

        out.println();
        out.flush();
    }

    /**
    * Display a stack trace for an execption
    */
    private final static void trace(Throwable ex)
    {
        out.println("= Stack trace:");
        ex.printStackTrace(out);
        if (ex instanceof LucidException)
        {
            LucidException lex = (LucidException) ex;
            Throwable nex = lex.getException();
            if (nex != null)
                trace(nex);
        }
    }

    /**
    * Take a new timestamp and print (not println) the time in seconds
    * since the last calling of <code>reportTime()</code>.
    */
    public final static void reportTime()
    {
        long now = System.currentTimeMillis();
        double diff = (now-time) / 1000;

        out.print(diff);
        out.flush();

        time = now;
    }

    /** For timing */
    protected static long time = 0;

    /** The place to print stuff */
    protected static PrintWriter out = null;

    /** What to do when it all goes wrong */
    protected static boolean fatal = false;
}

