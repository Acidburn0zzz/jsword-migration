<project name="jsword" default="deploy">

  <!--=======================================================================-->
  <!--
  When you first check files out of CVS you should run the generate and deploy
  targets to generate all the source files required for tools like eclipse.
  -->

  <!--=======================================================================-->
  <property name="source.root" value="."/>
  <property name="source.bin" value="${source.root}/bin"/>
  <property name="source.web" value="${source.root}/web"/>
  <property name="source.etc" value="${source.root}/etc"/>
  <property name="source.jar" value="${source.root}/jar"/>
  <property name="source.java" value="${source.root}/java"/>
  <property name="source.res" value="${source.root}/resource"/>
  <property name="source.keystore" value="${basedir}/jsword.keystore"/>
  <property name="gener.root" value="target/gener"/>
  <property name="target.root" value="target/ant"/>
  <property name="target.classes" value="${target.root}/temp/classes"/>
  <property name="target.jar" value="${target.root}/temp/jar"/>
  <property name="target.deploy" value="${target.root}/deploy/jsword"/>
  <property name="target.web" value="${target.root}/web"/>
  <property name="target.jnlp" value="${target.web}/jnlp"/>
  <property name="target.junit" value="${target.root}/junit"/>
  <property name="notes.root" value="notes"/>

  <property name="jnlp.alias" value="test builds"/>
  <property name="jnlp.password" value="p455w0rd"/>
  <property name="product.version" value="0.9.1"/>
  <!-- override this with -Djnlp.hostname=www.crosswire.org to build in live -->
  <property name="jnlp.hostname" value="localhost:8080"/>

  <!--=======================================================================-->
  <patternset id="java.non.compile">
    <include name="**/*.properties"/>
    <include name="**/*.gif"/>
    <include name="**/*.jpg"/>
    <include name="**/*.png"/>
  </patternset>
  <property name="java.non.compile" value="**/*.properties,**/*.gif,**/*.jpg,**/*.png"/>

  <!--=======================================================================-->
  <target name="init" description="Prepare for other tasks">
    <tstamp/>
    <echo message="Building to: ${target.root}"/>
  </target>

  <!--=======================================================================-->
  <target name="xjc" depends="init, xjc.check" unless="xjc.notrequired" description="Run XJC">
    <delete dir="${gener.root}/osis"/>
    <mkdir dir="${gener.root}/osis"/>
    <java fork="true" classname="com.sun.tools.xjc.Driver">
      <arg value="-d"/>
      <arg value="${gener.root}/osis"/>
      <arg value="-p"/>
      <arg value="org.crosswire.jsword.osis"/>
      <arg value="${source.etc}/osisCore.1.1.xsd"/>
      <classpath>
        <fileset dir="${source.jar}">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>
    </java>
  </target>
  <target name="xjc.check" depends="init" description="Check to see if xjc is needed">
    <mkdir dir="${gener.root}/osis"/>
    <condition property="xjc.notrequired">
      <and>
        <available file="${gener.root}/osis/org" type="dir"/>
        <not><!-- the sense <uptodate> back to front, but adding <not> is simpler than making <uptodate> dance -->
          <uptodate targetfile="${source.etc}/osisCore.1.1.1.xsd">
            <srcfiles dir="${gener.root}/osis"/>
          </uptodate>
        </not>
      </and>
    </condition>
  </target>

  <!--=======================================================================-->
  <target name="compile" depends="init, xjc" description="Validate source syntax">
    <antcall target="compile.section">
      <param name="section" value="common"/>
    </antcall>
    <echo message="Compiling ${gener.root}/osis"/>
    <mkdir dir="${target.classes}/osis"/>
    <javac debug="on" includes="**/*.java" destdir="${target.classes}/osis">
      <src path="${gener.root}/osis"/>
      <classpath>
        <dirset dir="${target.classes}"/>
        <fileset dir="${source.jar}">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>
    </javac>
    <copy todir="${target.classes}/osis">
      <fileset dir="${gener.root}/osis">
        <patternset refid="java.non.compile"/>
      </fileset>
    </copy>
    <antcall target="compile.section">
      <param name="section" value="jsword"/>
    </antcall>
    <antcall target="compile.section">
      <param name="section" value="servlet"/>
    </antcall>
    <antcall target="compile.section">
      <param name="section" value="swing"/>
    </antcall>
    <antcall target="compile.section">
      <param name="section" value="sword"/>
    </antcall>
    <antcall target="compile.section">
      <param name="section" value="map"/>
    </antcall>
    <antcall target="compile.section">
      <param name="section" value="commontest"/>
    </antcall>
    <antcall target="compile.section">
      <param name="section" value="jswordtest"/>
    </antcall>
    <antcall target="compile.section">
      <param name="section" value="servlettest"/>
    </antcall>
    <antcall target="compile.section">
      <param name="section" value="swingtest"/>
    </antcall>
    <antcall target="compile.section">
      <param name="section" value="swordtest"/>
    </antcall>
    <antcall target="compile.section">
      <param name="section" value="maptest"/>
    </antcall>
  </target>

  <!--=======================================================================-->
  <target name="compile.section">
    <echo message="Compiling ${source.java}/${section}"/>
    <mkdir dir="${target.classes}/${section}"/>
    <javac debug="on" includes="**/*.java" destdir="${target.classes}/${section}">
      <src path="${source.java}/${section}"/>
      <classpath>
        <dirset dir="${target.classes}"/>
        <fileset dir="${source.jar}">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>
    </javac>
    <copy todir="${target.classes}/${section}">
      <fileset dir="${source.java}/${section}">
        <patternset refid="java.non.compile"/>
      </fileset>
    </copy>
  </target>

  <!--=======================================================================-->
  <target name="check.config">
    <mkdir dir="${gener.root}/config"/>
    <style
        in="${source.res}/config.xml"
        out="${gener.root}/config/ConfigTest.java"
        style="${source.etc}/config-test.xsl"/>
    <mkdir dir="${target.classes}/config"/>
    <javac debug="on" includes="**/*.java" destdir="${target.classes}/config">
      <src path="${gener.root}/config"/>
      <classpath>
        <dirset dir="${target.classes}"/>
        <fileset dir="${source.jar}">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>
    </javac>
  </target>

  <!--=======================================================================-->
  <target name="jar" depends="compile, check.config" description="Create a jsword jar file">
    <mkdir dir="${target.jar}"/>
    <jar
        manifest="${source.etc}/desktop/MANIFEST.MF"
        jarfile="${target.jar}/jsword.jar">
      <fileset dir="${target.classes}/common"/>
      <!--fileset dir="${target.classes}/osis"/-->
      <fileset dir="${target.classes}/jsword"/>
      <fileset dir="${target.classes}/sword"/>
      <fileset dir="${target.classes}/map"/>
      <fileset dir="${target.classes}/swing"/>
      <fileset dir="${target.classes}/servlet"/>
    </jar>
  </target>

  <!--=======================================================================-->
  <target name="deploy" depends="jar" description="Build a ready to ship/test app">
    <mkdir dir="${target.deploy}/bin"/>
    <copy todir="${target.deploy}/bin">
      <fileset dir="${source.bin}"/>
    </copy>
    <chmod perm="a+x">
      <fileset dir="${target.deploy}">
        <include name="*.sh"/>
      </fileset>
    </chmod>
    <mkdir dir="${target.deploy}/lib"/>
    <copy todir="${target.deploy}/lib">
      <fileset dir="${source.jar}/jdom08" includes="*.jar"/>
      <fileset dir="${source.jar}/jlf10" includes="*.jar"/>
      <fileset dir="${source.jar}/log4j127" includes="*.jar"/>
      <fileset dir="${target.jar}" includes="*.jar"/>
    </copy>
    <mkdir dir="${target.deploy}/resource"/>
    <copy todir="${target.deploy}/resource">
      <fileset dir="${source.res}"/>
    </copy>
    <unzip
        src="${notes.root}/versions/projectb-ser-av.zip"
        dest="${target.deploy}/resource"
    />
  </target>

  <!--=======================================================================-->
  <target name="release">
    <buildnumber/>
    <antcall target="release.version">
      <param name="version" value="build${build.number}"/>
    </antcall>
  </target>

  <!--=======================================================================-->
  <target name="release.final">
    <antcall target="release.version">
      <param name="version" value="${product.version}"/>
    </antcall>
  </target>

  <!--=======================================================================-->
  <target name="release.version" depends="deploy">
    <echo message="Building release ${version}"/>
    <!-- source packages -->
    <zip zipfile="${target.deploy}/jsword-${version}-src.zip">
      <zipfileset prefix="source" dir="${source.root}">
        <exclude name="${target.root}/**"/>
        <exclude name="${notes.root}/**"/>
      </zipfileset>
    </zip>
    <tar tarfile="${target.deploy}/jsword-${version}-src.tar.gz" compression="gzip">
      <tarfileset prefix="source" dir="${source.root}">
        <exclude name="${target.root}/**"/>
        <exclude name="${notes.root}/**"/>
      </tarfileset>
    </tar>
    <!-- binary packages -->
    <zip zipfile="${target.deploy}/jsword-${version}-bin.zip">
      <fileset dir="${target.deploy}/jsword"/>
    </zip>
    <tar tarfile="${target.deploy}/jsword-${version}-bin.tar.gz" compression="gzip">
      <tarfileset dir="${target.deploy}/jsword"/>
    </tar>
  </target>

  <!--=======================================================================-->
  <target name="test" depends="deploy" description="Run the standard test suite">
    <mkdir dir="${target.junit}"/>
    <junit fork="yes" haltonfailure="no" printsummary="on" showoutput="yes">
      <jvmarg value="-Djsword.bible.dir=${basedir}/${target.deploy}/resource"/>
      <test name="CommonAllTests" todir="${target.junit}"/>
      <test name="JSwordAllTests" todir="${target.junit}"/>
      <test name="MapAllTests" todir="${target.junit}"/>
      <formatter type="plain" usefile="false"/>
      <formatter type="xml"/>
      <classpath>
        <pathelement path="${target.classes}/common"/>
        <pathelement path="${target.classes}/commontest"/>
        <pathelement path="${target.classes}/jsword"/>
        <pathelement path="${target.classes}/jswordtest"/>
        <pathelement path="${target.classes}/servlet"/>
        <pathelement path="${target.classes}/servlettest"/>
        <pathelement path="${target.classes}/swing"/>
        <pathelement path="${target.classes}/swingtest"/>
        <pathelement path="${target.classes}/map"/>
        <pathelement path="${target.classes}/maptest"/>
        <pathelement path="${target.classes}/sword"/>
        <pathelement path="${target.classes}/swordtest"/>
        <pathelement path="${target.deploy}/resource"/>
        <fileset dir="${target.deploy}" includes="**/*.jar"/>
      </classpath>
    </junit>
  </target>

  <!--=======================================================================-->
  <target name="web.testreport" depends="test" description="Compile test report">
    <junitreport todir="${target.junit}">
      <fileset dir="${target.junit}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${target.web}/test"/>
    </junitreport>
  </target>

  <!--=======================================================================-->
  <target name="web.files" depends="jar, jnlp.deploy" description="Copy the file based documentation">
    <mkdir dir="${target.web}"/>
    <copy todir="${target.web}">
      <fileset dir="${source.web}"/>
    </copy>
    <mkdir dir="${target.web}/WEB-INF/lib"/>
    <copy todir="${target.web}/WEB-INF/lib">
      <fileset dir="${source.jar}/jdom08" includes="*.jar"/>
      <fileset dir="${source.jar}/jlf10" includes="*.jar"/>
      <fileset dir="${source.jar}/log4j127" includes="*.jar"/>
      <fileset dir="${target.jar}" includes="*.jar"/>
    </copy>
    <mkdir dir="${target.web}/WEB-INF/classes"/>
    <copy todir="${target.web}/WEB-INF/classes">
      <fileset dir="${source.res}"/>
    </copy>
    <unzip
        src="${notes.root}/versions/projectb-ser-av.zip"
        dest="${target.web}/WEB-INF/classes"
        />
    <copy todir="${target.web}/WEB-INF">
      <fileset dir="${source.etc}/web"/>
    </copy>
  </target>

  <!--=======================================================================-->
  <target name="web.javadoc" depends="init" description="Create JavaDoc">
    <mkdir dir="${target.web}/api"/>
    <javadoc
        stylesheetfile="${source.web}/javadoc/stylesheet.css"
        destdir="${target.web}/api"
        overview="${source.java}/jsword/overview.html"
        private="true"
        author="true"
        use="true"
        splitindex="true"
        version="true">
      <packageset dir="${source.java}/common" defaultexcludes="yes">
        <include name="**" />
      </packageset>
      <packageset dir="${gener.root}/osis" defaultexcludes="yes">
        <include name="**" />
      </packageset>
      <packageset dir="${source.java}/jsword" defaultexcludes="yes">
        <include name="**" />
      </packageset>
      <packageset dir="${source.java}/servlet" defaultexcludes="yes">
        <include name="**" />
      </packageset>
      <packageset dir="${source.java}/swing" defaultexcludes="yes">
        <include name="**" />
      </packageset>
      <packageset dir="${source.java}/sword" defaultexcludes="yes">
        <include name="**" />
      </packageset>
      <packageset dir="${source.java}/map" defaultexcludes="yes">
        <include name="**" />
      </packageset>
      <tag name="todo" scope="all" description="To do:" />
      <tag name="label" scope="all" description="Together label:" />
      <doctitle>JSword</doctitle>
      <header>JSword</header>
      <footer>Copyright &#168; 2002</footer>
      <classpath>
        <fileset dir="${source.jar}">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>
      <link offline="true" href="http://java.sun.com/j2se/1.4/docs/api/" packagelistLoc="${source.web}/javadoc"/>
    </javadoc>
  </target>

  <!--=======================================================================-->
  <target name="web.java2html" depends="init" description="HTML versions of the java code">
    <mkdir dir="${target.web}/java2html"/>
    <java fork="true" classname="j2h" output="${target.web}/java2html/output.txt">
      <classpath>
        <fileset dir="${source.jar}">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>
      <arg value="-js"/>
      <arg value="${basedir}/${source.java}/common"/>
      <arg value="-js"/>
      <arg value="${basedir}/${source.java}/jsword"/>
      <arg value="-js"/>
      <arg value="${basedir}/${source.java}/servlet"/>
      <arg value="-js"/>
      <arg value="${basedir}/${source.java}/swing"/>
      <arg value="-js"/>
      <arg value="${basedir}/${source.java}/sword"/>
      <arg value="-js"/>
      <arg value="${basedir}/${source.java}/map"/>
      <arg value="-d" />
      <arg value="${target.web}/java2html"/>
      <arg value="-n"/>
      <arg value="jsword"/>
      <arg value="-m"/>
      <arg value="4"/>
      <arg value="-jd"/>
      <arg value="${javadoc.jdk130.local}"/>
      <arg value="${javadoc.jdk130.web}"/>
    </java>
  </target>

  <!--=======================================================================-->
  <target name="web.jdepend">
    <mkdir dir="${target.web}/jdepend"/>
    <jdepend format="xml" outputfile="${target.jdepend}/jdepend-report.xml">
      <sourcespath>
        <pathelement location="${source.java}/common"/>
        <pathelement location="${source.java}/jsword"/>
        <pathelement location="${source.java}/servlet"/>
        <pathelement location="${source.java}/swing"/>
        <pathelement location="${source.java}/sword"/>
        <pathelement location="${source.java}/map"/>
      </sourcespath>
      <classpath>
        <fileset dir="${source.jar}">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>
    </jdepend>
    <style
        basedir="${target.jdepend}"
        destdir="${target.web}/jdepend"
        includes="jdepend-report.xml"
        style="${source.etc}/jdepend.xsl"/>
  </target>

  <!--=======================================================================-->
  <target name="jnlp.prepare" depends="jar" description="moves files to correct location for JNLP deploy">
  <!-- consider making smaller class files with: http://sadun-util.sourceforge.net/pack.html -->
    <mkdir dir="${target.jnlp}"/>
    <copy todir="${target.jnlp}">
      <fileset dir="${source.jar}/jdom08" includes="*.jar"/>
      <fileset dir="${source.jar}/jlf10" includes="*.jar"/>
      <fileset dir="${source.jar}/log4j127" includes="*.jar"/>
      <fileset dir="${target.jar}" includes="*.jar"/>
      <fileset dir="${notes.root}/versions">
        <include name="*.jar"/>
        <include name="*.zip"/>
      </fileset>
    </copy>
    <jar destfile="${target.jnlp}/resource.jar" 
      basedir="${source.res}" 
      excludes="**/versions/**"/>
  </target>
  
  <!--=======================================================================-->
  <target name="jnlp.keygen" description="Generates a key for use in signing the JARs" unless="keystore.exists" depends="init, keystore.check">
    <echo message="Generating keystore for webstart testing"/>
    <genkey alias="${jnlp.alias}" storepass="${jnlp.password}" keystore="${source.keystore}">
      <dname>
        <param name="CN" value="JSword Project"/>
        <param name="OU" value="Test Builds"/>
        <param name="O" value="Crosswire.org"/>
        <param name="C" value="UK" />
      </dname>
    </genkey>
  </target>
  <target name="keystore.check" description="Check the keystore is there">
    <available property="keystore.exists" file="${source.keystore}"/>
  </target>

  <!--=======================================================================-->
  <target name="jnlp.deploy" description="sign jars to complete deployment" depends="jnlp.keygen, jnlp.prepare">
    <echo message="Signing project JARs"/>
    <signjar storepass="${jnlp.password}"
         alias="${jnlp.alias}"
         keystore="${source.keystore}"
         keypass="${jnlp.password}">
      <fileset dir="${target.jnlp}">
        <include name="**/*.jar"/>
        <include name="**/*.zip"/>
      </fileset>
    </signjar>
    <copy todir="${target.jnlp}" file="${source.etc}/jnlp/jsword.jnlp" filtering="true">
      <filterset>
        <filter token="HOSTNAME" value="${jnlp.hostname}"/>
        <filter token="WEBAPP" value="jsword"/>
      </filterset>
    </copy>
  </target>

  <!--=======================================================================-->
  <target name="web" depends="web.files, web.javadoc, web.java2html, web.testreport" description="All the documentation tasks">
  </target>

  <!--=======================================================================-->
  <target name="all" depends="clean, test, web" description="Run a full clean/build/deploy/test cycle">
  </target>

  <!--=======================================================================-->
  <target name="clean" depends="init" description="Remove the target directory">
    <delete dir="${target.root}"/>
  </target>

  <!--=======================================================================-->
  <target name="cvsup" description="cvs update">
    <cvs cvsRoot=":pserver:joe@cvs.crosswire.org:/cvs/jsword" dest="..">
      <commandline>
        <argument value="-q"/>
        <argument value="update"/>
        <argument value="-d"/>
        <argument value="-P"/>
      </commandline>
    </cvs>
  </target>

  <!--=======================================================================-->
  <target name="tomcatinit">
    <property name="web.path" value="/jsword"/>
    <property name="url" value="http://localhost:8080/manager"/>
    <!-- You will need to -Dusername=fred -Dpassword=secret -->
    <!-- property name="username" value="myusername"/ -->
    <!-- property name="password" value="mypassword"/ -->

    <taskdef name="deploy"    classname="org.apache.catalina.ant.DeployTask"/>
    <taskdef name="install"   classname="org.apache.catalina.ant.InstallTask"/>
    <taskdef name="list"      classname="org.apache.catalina.ant.ListTask"/>
    <taskdef name="reload"    classname="org.apache.catalina.ant.ReloadTask"/>
    <taskdef name="remove"    classname="org.apache.catalina.ant.RemoveTask"/>
    <taskdef name="resources" classname="org.apache.catalina.ant.ResourcesTask"/>
    <taskdef name="roles"     classname="org.apache.catalina.ant.RolesTask"/>
    <taskdef name="start"     classname="org.apache.catalina.ant.StartTask"/>
    <taskdef name="stop"      classname="org.apache.catalina.ant.StopTask"/>
    <taskdef name="undeploy"  classname="org.apache.catalina.ant.UndeployTask"/>
  </target>

  <!--=======================================================================-->
  <target name="install" description="Install web application" depends="tomcatinit, web.files">
    <install url="${url}" username="${username}" password="${password}" path="${path}" war="file://$basedir}/${target.root}/web"/>
  </target>

  <!--=======================================================================-->
  <target name="reload" description="Reload web application" depends="tomcatinit, web.files">
    <reload url="${url}" username="${username}" password="${password}" path="${path}"/>
  </target>

  <!--=======================================================================-->
  <target name="remove" description="Remove web application" depends="tomcatinit">
    <remove url="${url}" username="${username}" password="${password}" path="${path}"/>
  </target>

</project>
