package org.crosswire.jsword.passage;

import java.util.Iterator;

import org.crosswire.common.util.Logger;

/**
 * An implementation of some of the easier methods from KeyList.
 * 
 * <p><table border='1' cellPadding='3' cellSpacing='0'>
 * <tr><td bgColor='white' class='TableRowColor'><font size='-7'>
 *
 * Distribution Licence:<br />
 * JSword is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public License,
 * version 2 as published by the Free Software Foundation.<br />
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.<br />
 * The License is available on the internet
 * <a href='http://www.gnu.org/copyleft/gpl.html'>here</a>, or by writing to:
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston,
 * MA 02111-1307, USA<br />
 * The copyright to this program is held by it's authors.
 * </font></td></tr></table>
 * @see gnu.gpl.Licence
 * @author Joe Walker [joe at eireneh dot com]
 * @version $Id$
 */
public abstract class AbstractKeyList implements KeyList
{
    /* (non-Javadoc)
     * @see org.crosswire.jsword.passage.KeyList#isEmpty()
     */
    public boolean isEmpty()
    {
        return size() == 0;
    }

    /* (non-Javadoc)
     * @see org.crosswire.jsword.passage.KeyList#contains(org.crosswire.jsword.passage.Key)
     */
    public boolean contains(Key key)
    {
        for (Iterator it = iterator(); it.hasNext(); )
        {
            Key temp = (Key) it.next();
            if (key.equals(temp))
            {
                return true;
            }
        }

        return false;
    }

    /* (non-Javadoc)
     * @see java.lang.Object#toString()
     */
    public String toString()
    {
        return getName();
    }

    /**
     * Override the default name with a custom name.
     * If the name is null then a name will be generated by concatenating the
     * names of all the elements of this node.
     */
    public void setName(String name)
    {
        this.name = name;
    }

    /* (non-Javadoc)
     * @see org.crosswire.jsword.passage.Key#getName()
     */
    public String getName()
    {
        if (name != null)
        {
            return name;
        }

        StringBuffer buffer = new StringBuffer();

        for (Iterator it = iterator(); it.hasNext(); )
        {
            Key key = (Key) it.next();
            String keyname = key.getName();
            
            if (keyname.indexOf(',') != -1)
            {
                log.warn("getName() will break because a key contains the , char");
            }

            buffer.append(keyname);
            
            if (it.hasNext())
            {
                buffer.append(", ");
            }
        }

        return buffer.toString();
    }

    /* (non-Javadoc)
     * @see java.lang.Comparable#compareTo(java.lang.Object)
     */
    public int compareTo(Object obj)
    {
        KeyList that = (KeyList) obj;

        Key thisfirst = (Key) this.iterator().next();
        Key thatfirst = (Key) that.iterator().next();

        if (thisfirst == null)
        {
            if (thatfirst == null)
            {
                // we are both empty, and rank the same
                return 0;
            }
            else
            {
                // i am empty, he is not so we are greater
                return 1;
            }
        }
        
        if (thatfirst == null)
        {
            // he is empty, we are not so he is greater
            return -1;
        }

        return thisfirst.compareTo(thatfirst);
    }

    private String name;

    /**
     * The log stream
     */
    private static Logger log = Logger.getLogger(AbstractKeyList.class);
}
