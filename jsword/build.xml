<project name="jsword" default="deploy">

  <!--=======================================================================-->
  <property name="source.root" value="."/>
  <property name="source.bin" value="${source.root}/bin"/>
  <property name="source.doc" value="${source.root}/doc"/>
  <property name="source.etc" value="${source.root}/etc"/>
  <property name="source.jar" value="${source.root}/jar"/>
  <property name="source.java" value="${source.root}/java"/>
  <property name="source.res" value="${source.root}/resource"/>
  <property name="source.xsl" value="${source.root}/xsl"/>
  <property name="source.versions" value="../notes/versions"/>
  <property name="source.web" value="${source.root}/web"/>
  <property name="target.root" value="target/ant"/>
  <property name="target.classes" value="${target.root}/temp/classes"/>
  <property name="target.jar" value="${target.root}/temp/jar"/>
  <property name="target.deploy" value="${target.root}/deploy/jsword"/>
  <property name="target.doc" value="${target.root}/doc"/>
  <property name="target.jnlp" value="${target.doc}/jnlp"/>
  <property name="target.junit" value="${target.root}/junit"/>
  <property name="notes.root" value="notes"/>
  <property name="jnlp.keystore" value="${basedir}/jsword.keystore"/>
  <property name="jnlp.alias" value="test builds"/>
  <property name="jnlp.password" value="p455w0rd"/>

  <property name="product.version" value="0.9.1"/>

  <!--=======================================================================-->
  <patternset id="java.non.compile">
    <include name="**/*.properties"/>
    <include name="**/*.gif"/>
    <include name="**/*.jpg"/>
    <include name="**/*.png"/>
  </patternset>
  <property name="java.non.compile" value="**/*.properties,**/*.gif,**/*.jpg,**/*.png"/>

  <!--=======================================================================-->
  <target name="init" description="Prepare for other tasks">
    <tstamp/>
    <echo message="Building to: ${target.root}"/>
    <available property="keystore.exists" file="${jnlp.keystore}"/>
  </target>

  <!--=======================================================================-->
  <target name="compile" depends="init" description="Validate source syntax">
    <antcall target="compile.section">
      <param name="section" value="common"/>
    </antcall>
    <antcall target="compile.section">
      <param name="section" value="jsword"/>
    </antcall>
    <antcall target="compile.section">
      <param name="section" value="sword"/>
    </antcall>
    <antcall target="compile.section">
      <param name="section" value="map"/>
    </antcall>
    <antcall target="compile.section">
      <param name="section" value="commontest"/>
    </antcall>
    <antcall target="compile.section">
      <param name="section" value="jswordtest"/>
    </antcall>
    <antcall target="compile.section">
      <param name="section" value="swordtest"/>
    </antcall>
    <antcall target="compile.section">
      <param name="section" value="maptest"/>
    </antcall>
  </target>

  <!--=======================================================================-->
  <target name="compile.section">
    <echo message="Compiling ${section}"/>
    <mkdir dir="${target.classes}/${section}"/>
    <javac debug="on" includes="**/*.java" destdir="${target.classes}/${section}">
      <src path="${source.java}/${section}"/>
      <classpath>
        <dirset dir="${target.classes}"/>
        <fileset dir="${source.jar}">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>
    </javac>
    <copy todir="${target.classes}/${section}">
      <fileset dir="${source.java}/${section}">
        <patternset refid="java.non.compile"/>
      </fileset>
    </copy>
  </target>

  <!--=======================================================================-->
  <target name="jar" depends="compile" description="Create a jsword jar file">
    <mkdir dir="${target.jar}"/>
    <jar
        manifest="${source.etc}/desktop/MANIFEST.MF"
        jarfile="${target.jar}/${ant.project.name}.jar">
      <fileset dir="${target.classes}/common"/>
      <fileset dir="${target.classes}/jsword"/>
      <fileset dir="${target.classes}/sword"/>
      <fileset dir="${target.classes}/map"/>
    </jar>
  </target>

  <!--=======================================================================-->
  <target name="deploy" depends="jar" description="Build a ready to ship/test app">
    <mkdir dir="${target.deploy}/bin"/>
    <copy todir="${target.deploy}/bin">
      <fileset dir="${source.bin}"/>
    </copy>
    <chmod perm="a+x">
      <fileset dir="${target.deploy}">
        <include name="*.sh"/>
      </fileset>
    </chmod>
    <mkdir dir="${target.deploy}/lib"/>
    <copy todir="${target.deploy}/lib">
      <fileset dir="${source.jar}/jdom08" includes="*.jar"/>
      <fileset dir="${source.jar}/jlf10" includes="*.jar"/>
      <fileset dir="${source.jar}/log4j126" includes="*.jar"/>
      <fileset dir="${target.jar}" includes="*.jar"/>
    </copy>
    <mkdir dir="${target.deploy}/resource"/>
    <copy todir="${target.deploy}/resource">
      <fileset dir="${source.res}"/>
    </copy>
    <unzip
        src="${notes.root}/versions/projectb-ser-av.zip"
        dest="${target.deploy}/resource"
    />
  </target>

  <!--=======================================================================-->
  <target name="release">
    <buildnumber/>
    <antcall target="release.version">
      <param name="version" value="build${build.number}"/>
    </antcall>
  </target>

  <!--=======================================================================-->
  <target name="release.final">
    <antcall target="release.version">
      <param name="version" value="${product.version}"/>
    </antcall>
  </target>

  <!--=======================================================================-->
  <target name="release.version" depends="deploy">
    <echo message="Building release ${version}"/>
    <!-- source packages -->
    <zip zipfile="${target.deploy}/${ant.project.name}-${version}-src.zip">
      <zipfileset prefix="source" dir="${source.root}">
        <exclude name="${target.root}/**"/>
        <exclude name="${notes.root}/**"/>
      </zipfileset>
    </zip>
    <tar tarfile="${target.deploy}/${ant.project.name}-${version}-src.tar.gz" compression="gzip">
      <tarfileset prefix="source" dir="${source.root}">
        <exclude name="${target.root}/**"/>
        <exclude name="${notes.root}/**"/>
      </tarfileset>
    </tar>
    <!-- binary packages -->
    <zip zipfile="${target.deploy}/${ant.project.name}-${version}-bin.zip">
      <fileset dir="${target.deploy}/${ant.project.name}"/>
    </zip>
    <tar tarfile="${target.deploy}/${ant.project.name}-${version}-bin.tar.gz" compression="gzip">
      <tarfileset dir="${target.deploy}/${ant.project.name}"/>
    </tar>
  </target>

  <!--=======================================================================-->
  <target name="test" depends="deploy" description="Run the standard test suite">
    <mkdir dir="${target.junit}"/>
    <junit fork="yes" haltonfailure="no" printsummary="on" showoutput="yes">
      <test name="CommonAllTests" todir="${target.junit}"/>
      <test name="JSwordAllTests" todir="${target.junit}"/>
      <test name="MapAllTests" todir="${target.junit}"/>
      <formatter type="plain" usefile="false"/>
      <formatter type="xml"/>
      <classpath>
        <pathelement path="${target.classes}/common"/>
        <pathelement path="${target.classes}/commontest"/>
        <pathelement path="${target.classes}/jsword"/>
        <pathelement path="${target.classes}/jswordtest"/>
        <pathelement path="${target.classes}/map"/>
        <pathelement path="${target.classes}/maptest"/>
        <pathelement path="${target.classes}/sword"/>
        <pathelement path="${target.classes}/swordtest"/>
        <pathelement path="${target.deploy}/${ant.project.name}/resource"/>
        <fileset dir="${target.deploy}" includes="**/*.jar"/>
      </classpath>
    </junit>
  </target>

  <!--=======================================================================-->
  <target name="doc.report" depends="test" description="Compile test report">
    <junitreport todir="${target.junit}">
      <fileset dir="${target.junit}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${target.doc}/test"/>
    </junitreport>
  </target>

  <!--=======================================================================-->
  <target name="doc.files" depends="jar" description="Copy the file based documentation">
    <mkdir dir="${target.doc}"/>
    <copy todir="${target.doc}">
      <fileset dir="${source.doc}"/>
    </copy>
    <mkdir dir="${target.doc}/WEB-INF/lib"/>
    <copy todir="${target.doc}/WEB-INF/lib">
      <fileset dir="${source.jar}/jdom08" includes="*.jar"/>
      <fileset dir="${source.jar}/jlf10" includes="*.jar"/>
      <fileset dir="${source.jar}/log4j126" includes="*.jar"/>
      <fileset dir="${target.jar}" includes="*.jar"/>
    </copy>
    <mkdir dir="${target.doc}/WEB-INF/classes"/>
    <copy todir="${target.doc}/WEB-INF/classes">
      <fileset dir="${source.res}"/>
    </copy>
    <unzip
        src="${notes.root}/versions/projectb-ser-av.zip"
        dest="${target.doc}/WEB-INF/classes"
        />
    <copy todir="${target.doc}/WEB-INF">
      <fileset dir="${source.etc}/web"/>
    </copy>
  </target>

  <!--=======================================================================-->
  <target name="doc.javadoc" depends="init" description="Create JavaDoc">
    <mkdir dir="${target.doc}/api"/>
    <javadoc
        destdir="${target.doc}/api"
        overview="${source.java}/jsword/overview.html"
        private="true"
        author="true"
        use="true"
        splitindex="true"
        version="true">
      <packageset dir="${source.java}/common" defaultexcludes="yes">
        <include name="**" />
      </packageset>
      <packageset dir="${source.java}/jsword" defaultexcludes="yes">
        <include name="**" />
      </packageset>
      <packageset dir="${source.java}/sword" defaultexcludes="yes">
        <include name="**" />
      </packageset>
      <packageset dir="${source.java}/map" defaultexcludes="yes">
        <include name="**" />
      </packageset>
      <tag name="todo" scope="all" description="To do:" />
      <tag name="label" scope="all" description="Together label:" />
      <doctitle>JSword</doctitle>
      <header>JSword</header>
      <footer>Copyright &#168; 2002</footer>
      <classpath>
        <fileset dir="${source.jar}">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>
      <link offline="true" href="http://java.sun.com/j2se/1.4/docs/api/" packagelistLoc="${source.doc}/jdk14api"/>
    </javadoc>
  </target>

  <!--=======================================================================-->
  <target name="doc.java2html" depends="init" description="HTML versions of the java code">
    <mkdir dir="${target.doc}/java2html"/>
    <java fork="true" classname="j2h">
      <classpath>
        <fileset dir="${source.jar}">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>
      <arg value="-js"/>
      <arg value="${basedir}/${source.java}/common"/>
      <arg value="-js"/>
      <arg value="${basedir}/${source.java}/jsword"/>
      <arg value="-js"/>
      <arg value="${basedir}/${source.java}/sword"/>
      <arg value="-js"/>
      <arg value="${basedir}/${source.java}/map"/>
      <arg value="-d" />
      <arg value="${target.doc}/java2html"/>
      <arg value="-n"/>
      <arg value="${ant.project.name}"/>
      <arg value="-m"/>
      <arg value="4"/>
      <arg value="-jd"/>
      <arg value="${javadoc.jdk130.local}"/>
      <arg value="${javadoc.jdk130.web}"/>
    </java>
  </target>

  <!--=======================================================================-->
  <target name="doc" depends="doc.files, doc.javadoc, doc.java2html, doc.report" description="All the documentation tasks">
  </target>

  <!--=======================================================================-->
  <target name="all" depends="clean,test,doc" description="Run a full clean/build/deploy/test cycle">
  </target>

  <!--=======================================================================-->
  <target name="clean" depends="init" description="Remove the target directory">
    <delete dir="${target.root}"/>
  </target>

  <!--=======================================================================-->
  <target name="cvsup" description="cvs update">
    <cvs cvsRoot=":pserver:joe@cvs.crosswire.org:/cvs/jsword" dest="..">
      <commandline>
        <argument value="-q"/>
        <argument value="update"/>
        <argument value="-d"/>
        <argument value="-P"/>
      </commandline>
    </cvs>
  </target>
  
  <!--=======================================================================-->
  <target name="jnlp.prepare" depends="jar" description="moves files to correct location for JNLP deploy">
    <mkdir dir="${target.jnlp}"/>
    <copy todir="${target.jnlp}">
      <fileset dir="${source.jar}/jdom08" includes="*.jar"/>
      <fileset dir="${source.jar}/jlf10" includes="*.jar"/>
      <fileset dir="${source.jar}/log4j126" includes="*.jar"/>
      <fileset dir="${target.jar}" includes="*.jar"/>
      <fileset dir="${notes.root}/versions">
        <include name="*.jar"/>
        <include name="*.zip"/>
      </fileset>
      <fileset dir="${source.etc}/jnlp" includes="jsword.jnlp" />
    </copy>
    <jar destfile="${target.jnlp}/resource.jar" basedir="${source.res}"/>
  </target>
  
  <!--=======================================================================-->

  <target name="jnlp.keygen" description="Generates a key for use in signing the JARs" unless="keystore.exists" depends="init">
    <echo message="Generating keystore for webstart testing"/>
    <genkey alias="${jnlp.alias}" storepass="${jnlp.password}" keystore="${jnlp.keystore}">
      <dname>
        <param name="CN" value="JSword Project"/>
	<param name="OU" value="Test Builds"/>
	<param name="O" value="Crosswire.org"/>
	<param name="C" value="UK" />
      </dname>
    </genkey>
  </target>
  
  <!--=======================================================================-->

  <target name="jnlp.deploy" description="sign jars to complete deployment" depends="jnlp.keygen, jnlp.prepare">
    <echo message="Signing project JARs"/>
    <signjar storepass="p455w0rd"
         alias="${jnlp.alias}"
         keystore="${jnlp.keystore}"
         keypass="${jnlp.password}">
      <fileset dir="${target.jnlp}">
        <include name="**/*.jar"/>
        <include name="**/*.zip"/>
      </fileset>
    </signjar>
  </target>
</project>
