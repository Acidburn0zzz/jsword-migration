<project name="jsword" default="all">

  <!--=======================================================================-->
  <!--
  When you first check files out of CVS you should run ant using the all target
  to generate all the source files required for tools like eclipse.
  -->

  <!--=======================================================================-->
  <property name="source.root" value="."/>
  <property name="source.etc" value="${source.root}/etc"/>
  <property name="source.jar" value="${source.root}/jar"/>
  <property name="source.java" value="${source.root}/java"/>
  <property name="source.res" value="${source.root}/resource"/>
  <property name="gener.root" value="target/gener"/>
  <property name="target.root" value="target/ant"/>
  <property name="target.temp" value="${target.root}/temp"/>
  <property name="target.classes" value="${target.temp}/classes"/>
  <property name="target.jar" value="${target.temp}/jar"/>
  <property name="common.target" value="../common/target/ant/temp/jar"/>
  
  <!--=======================================================================-->
  <patternset id="java.non.compile">
    <include name="**/*.properties"/>
    <include name="**/*.gif"/>
    <include name="**/*.jpg"/>
    <include name="**/*.png"/>
    <include name="**/*.ser"/>
  </patternset>
  <property name="java.non.compile" value="**/*.properties,**/*.gif,**/*.jpg,**/*.png,**/*.ser"/>

  <!--=======================================================================-->
  <target name="init" description="Prepare for other tasks">
    <tstamp/>
    <echo message="Building to: ${target.root}"/>
  </target>


  <!--=======================================================================-->
  <target name="xjc" depends="init, xjc.check" unless="xjc.uptodate" description="Run XJC">
    <delete dir="${gener.root}/osis"/>
    <mkdir dir="${gener.root}/osis"/>
    <java fork="true" classname="com.sun.tools.xjc.Driver">
      <arg value="-d"/>
      <arg value="${gener.root}/osis"/>
      <arg value="-p"/>
      <arg value="org.crosswire.jsword.osis"/>
      <arg value="${source.etc}/osis/osisCore.1.1.1.xsd"/>
      <classpath>
        <fileset dir="${source.jar}" includes="**/*.jar"/>
      </classpath>
    </java>
  </target>
  <target name="xjc.check" depends="init" description="Check to see if xjc is needed">
    <mkdir dir="${gener.root}/osis"/>
    <condition property="xjc.uptodate">
      <and>
        <available file="${target.jar}/jsword-osis.jar" type="file"/>
        <available file="${gener.root}/osis/org" type="dir"/>
        <not><!-- the sense <uptodate> back to front, but adding <not> is simpler than making <uptodate> dance -->
          <uptodate targetfile="${source.etc}/osisCore.1.1.1.xsd">
            <srcfiles dir="${target.jar}" includes="jsword-osis.jar"/>
          </uptodate>
        </not>
      </and>
    </condition>
  </target>

  <!--=======================================================================-->
  <target name="osis" depends="xjc">
    <mkdir dir="${target.jar}"/>
    <echo message="Compiling ${gener.root}/osis"/>
    <mkdir dir="${target.classes}/osis"/>
    <javac debug="on" includes="**/*.java" destdir="${target.classes}/osis">
      <src path="${gener.root}/osis"/>
      <classpath>
        <dirset dir="${target.classes}"/>
        <fileset dir="${source.jar}" includes="**/*.jar"/>
      </classpath>
    </javac>
    <copy todir="${target.classes}/osis">
      <fileset dir="${gener.root}/osis">
        <patternset refid="java.non.compile"/>
      </fileset>
    </copy>
    <jar jarfile="${target.jar}/jsword-osis.jar">
      <fileset dir="${target.classes}/osis"/>
    </jar>
  </target>

  <!--=======================================================================-->
  <target name="compile" depends="osis" description="Validate source syntax">
    <antcall target="compile.section"><param name="section" value="jsword"/></antcall>
    <antcall target="compile.section"><param name="section" value="jswordtest"/></antcall>
  </target>

  <!--=======================================================================-->
  <target name="compile.section">
    <echo message="Compiling ${source.java}/${section}"/>
    <mkdir dir="${target.classes}/${section}"/>
    <javac debug="on" includes="**/*.java" destdir="${target.classes}/${section}" source="1.4">
      <src path="${source.java}/${section}"/>
      <classpath>
        <dirset dir="${target.classes}"/>
        <fileset dir="${source.jar}" includes="**/*.jar"/>
        <fileset dir="${common.target}" includes="**/*.jar"/>
      </classpath>
    </javac>
    <copy todir="${target.classes}/resource">
      <fileset dir="${source.java}/${section}">
        <patternset refid="java.non.compile"/>
      </fileset>
    </copy>
  </target>

  <!--=======================================================================-->
  <target name="jar" depends="compile, jar.check" unless="jar.uptodate" description="create the jar files">
    <mkdir dir="${target.jar}"/>
    <jar jarfile="${target.jar}/jsword.jar">
      <fileset dir="${target.classes}/jsword"/>
      <fileset dir="${source.res}"/>
    </jar>
  </target>
  <target name="jar.check" description="Check to see that the api jar file is up to date">
    <uptodate property="jar.uptodate" targetfile="${target.jar}/jsword.jar">
      <srcfiles dir="${target.classes}/jsword"/>
      <srcfiles dir="${source.res}"/>
    </uptodate>
  </target>

  <!--=======================================================================-->
  <target name="all" depends="clean, jar" description="Run a full clean/build/deploy/test cycle">
  </target>

  <!--=======================================================================-->
  <target name="clean" depends="init" description="Remove the target directory">
    <delete dir="${target.root}"/>
  </target>

  <!--=======================================================================-->
  <target name="cvsup" description="cvs update">
    <cvs cvsRoot=":pserver:joe@cvs.crosswire.org:/cvs/jsword" dest=".">
      <commandline>
        <argument value="-q"/>
        <argument value="update"/>
        <argument value="-d"/>
        <argument value="-P"/>
      </commandline>
    </cvs>
    <chmod perm="755">
      <fileset dir="${source.etc}/build" includes="**/*.sh"/>
    </chmod>
  </target>

</project>
